package Test_Groww;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.time.Duration;

import org.apache.commons.io.FileUtils;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.support.events.EventFiringDecorator;
import org.openqa.selenium.support.events.WebDriverListener;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.ITestResult;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.Status;
import com.aventstack.extentreports.reporter.ExtentSparkReporter;
import utils.EventHandler;

public class Test_groww {
    private ExtentReports extent;
    private ExtentTest test;
    public static WebDriver driver;
    private static final String testDataFile = "/home/coder/project/workspace/Project/testdata/Testdata.xlsx";

    @BeforeClass
    public WebDriver beforeMethod() throws MalformedURLException {
        ChromeOptions chromeOptions = new ChromeOptions();
        driver = new RemoteWebDriver(new URL("http://localhost:4444/"), chromeOptions);
        driver.get("https://groww.in/");
        extent = new ExtentReports();
        ExtentSparkReporter spark = new ExtentSparkReporter("/home/coder/project/workspace/Project/test-output/ExtentReport.html");
        extent.attachReporter(spark);

        driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(30));
        WebDriverListener listener = new EventHandler();
        driver = new EventFiringDecorator<>(listener).decorate(driver);
        return driver;
    }

    @BeforeMethod
    public void createTest(ITestResult result) {
        test = extent.createTest(result.getMethod().getMethodName());
    }

    @Test
    public void test() throws IOException {
        test.log(Status.INFO, "Clicking on 'Calculators' Link");
        driver.findElement(By.linkText("Calculators")).click();
        String expectedTitle = "Financial Planning Calculators - Groww | Calculate Your Investment Online";
        String actualTitle = driver.getTitle();
        System.out.println(actualTitle);
        Assert.assertEquals(actualTitle, expectedTitle, "Calculator page title mismatch");
        test.log(Status.PASS, "Verified 'Calculators' label");
        captureScreen(test, "/home/coder/project/workspace/Project/test-output/screenshot");
        File screenshotFile = new File("/home/coder/project/workspace/Project/test-output/screenshot.png");
        Assert.assertTrue(screenshotFile.exists(), "Screenshot not found");

        test.log(Status.INFO, "Clicking on 'Home Loan EMI' link");
        WebDriverWait wait = new WebDriverWait(driver, java.time.Duration.ofSeconds(30));
        WebElement homeloan = driver.findElement(By.xpath("//*[@id=\"root\"]/div[2]/div[2]/a[15]/div/p[1]"));
        homeloan.click();
        wait.until(ExpectedConditions.visibilityOfElementLocated(By.id("LOAN_AMOUNT")));

        String loanAmount = getTestData("loanAmount");
        String interestRate = getTestData("interestRate");
        String loanTenure = getTestData("loanTenure");

        test.log(Status.INFO, "Clearing existing loan amount");
        driver.findElement(By.id("LOAN_AMOUNT")).clear();
        test.log(Status.INFO, "Entering loan amount from Excel: " + loanAmount);
        driver.findElement(By.id("LOAN_AMOUNT")).sendKeys(loanAmount);

        test.log(Status.INFO, "Clearing existing interest rate");
        driver.findElement(By.id("RATE_OF_INTEREST")).clear();
        test.log(Status.INFO, "Entering interest rate: " + interestRate);
        driver.findElement(By.id("RATE_OF_INTEREST")).sendKeys(interestRate);

        test.log(Status.INFO, "Updating loan tenure");
        driver.findElement(By.id("LOAN_TENURE")).clear();
        driver.findElement(By.id("LOAN_TENURE")).sendKeys(loanTenure);

        String expectedAmortizationText = "Your Amortization Details (Yearly/Monthly)";
        String actualAmortizationText = driver.findElement(By.xpath("//h1[text()='Your Amortization Details (Yearly/Monthly)']")).getText();
        Assert.assertEquals(actualAmortizationText, expectedAmortizationText, "Your amortization details text mismatch");
        test.log(Status.PASS, "Verified 'Your Amortization Details (Yearly/Monthly)' text");
        captureScreen(test, "/home/coder/project/workspace/Project/test-output/screenshot");

        extent.flush();
        File reportFile = new File("/home/coder/project/workspace/Project/test-output/ExtentReport.html");
        Assert.assertTrue(reportFile.exists(), "Report not found");
    }

    private String getTestData(String key) throws IOException {
        FileInputStream inputStream = new FileInputStream(new File(testDataFile));
        Workbook workbook = new XSSFWorkbook(inputStream);
        Sheet sheet = workbook.getSheetAt(0);
        for (Row row : sheet) {
            Cell keyCell = row.getCell(0);
            if (keyCell == null || keyCell.getCellType() != CellType.STRING || !keyCell.getStringCellValue().equals(key)) {
                continue;
            }
            Cell valueCell = row.getCell(1);
            return valueCell.getStringCellValue();
        }
        throw new RuntimeException("Test data for key '" + key + "' not found in Excel sheet");
    }

    private void captureScreen(ExtentTest test, String fileName) throws IOException {
        TakesScreenshot screenshot = (TakesScreenshot) driver;
        File screenshotFile = screenshot.getScreenshotAs(OutputType.FILE);
        FileUtils.copyFile(screenshotFile, new File(fileName + ".png"));
        test.log(Status.INFO, "Screenshot captured: " + test.addScreenCaptureFromPath(fileName + ".png"));
    }
}

Base.java:

package utils;

import java.io.FileInputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.time.Duration;
import java.util.Properties;
import org.apache.log4j.Logger;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.safari.SafariDriver;
import org.openqa.selenium.support.events.EventFiringDecorator;
import org.openqa.selenium.support.events.WebDriverListener;
import io.github.bonigarcia.wdm.WebDriverManager;

public class Base {
    public static WebDriver driver;
    public final int IMPLICIT_WAIT_TIME = 10;
    public final int PAGE_LOAD_TIME = 5;
    public Properties prop;
    private static final Logger log = Logger.getLogger(Base.class);
    public Base() {
        String filepath = System.getProperty("user.dir") + "/config/browser.properties";
    
        try {
            FileInputStream file = new FileInputStream(filepath);
            prop = new Properties();
            prop.load(file);
        } catch (IOException e) {
            System.out.println(e.getLocalizedMessage());
        }
    }

    public WebDriver openBrowser() throws MalformedURLException {
        String browsername = prop.getProperty("browsername");
        if (browsername.equalsIgnoreCase("chrome")) {
             DesiredCapabilities dc = new DesiredCapabilities();
             dc.setBrowserName("chrome");
             driver = new RemoteWebDriver(new URL("http://localhost:4444"), dc);
        } else if (browsername.equalsIgnoreCase("firefox")) {
            WebDriverManager.firefoxdriver().setup();
            driver = new FirefoxDriver();
        } else if (browsername.equalsIgnoreCase("edge")) {
            WebDriverManager.edgedriver().setup();
            driver = new EdgeDriver();
        } else if (browsername.equalsIgnoreCase("ie")) {
            WebDriverManager.iedriver().setup();
            driver = new InternetExplorerDriver();
        } else if (browsername.equalsIgnoreCase("safari")) {
            WebDriverManager.safaridriver().setup();
            driver = new SafariDriver();
        }
        driver.manage().window().maximize();
        log.info("Browser Launched");
        driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(IMPLICIT_WAIT_TIME));
        driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(PAGE_LOAD_TIME));
        driver.get(prop.getProperty("url"));
        log.info("Browser Loaded the URL");

        WebDriverListener listener = new EventHandler();
        driver = new EventFiringDecorator<>(listener).decorate(driver);
        return driver;
    }

    public void navigateToURL(WebDriver driver, Properties prop) {
        try {
            driver.get(prop.getProperty("url"));
        } catch (Exception e) {
            e.printStackTrace();

        }
    }
}

Excel:

loanAmount 2300000
interestRate 8
loanTenure 25
